class Solution:
    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:
        if not head:
            return None
        if not head.next:
            return None
        if left == right:
            return head
#         temp1 = temp2 = temp3 = ListNode(0)
#         temp1 = head
#         while temp1.val != left:
#             temp1 = temp1.next

#         temp2 = temp1
#         # temp2 = head
#         while temp2.val != right:
#             temp2 = temp2.next

#         prev = None
#         current = None
#         next1 = temp1
#         while current != temp2:
#             prev = current
#             current = next1
#             next1 = next1.next
#             current.next = prev
#         # temp1 = current
#         temp3 = head
#         while temp3.next != temp1:
#             temp3 = temp3.next
        
#         temp3 = current
#         return temp3
#         # return head
#         # temp4 = head
#         head.next = temp3
#         return head

        leftNode = head
        rightNode = head
        leftPrevNode = None
        rightNextNode = None
        last = head
        steps = 1
        
        while (steps < right):
            if steps < left:
                leftPrevNode = leftNode
                leftNode = leftNode.next
            if steps < right:
                rightNode = rightNode.next
                rightNextNode = rightNode.next
            steps += 1
            last = last.next

        # to reverse
        prev = leftNode
        current = leftNode.next
        temp: Optional[ListNode]
            
        while current != rightNextNode:
            temp = current.next
            current.next = prev
            prev = current
            current = temp
      
        leftNode.next = rightNextNode
		
		# when left is 1 
        if leftPrevNode == None:
            head = prev
        else:
            leftPrevNode.next = prev
      
        return head
