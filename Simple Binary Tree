class TreeNode:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
    
    def display_keys(self, node, space='\t', level=0):
        if node is None:
            print(space*level + 'âˆ…')
            return None
        if node.left is None and node.right is None:
            print(space*level + str(node.key))
            return None
        self.display_keys(node.right, space, level+1)
        print(space*level + str(node.key))
        self.display_keys(node.left, space, level +1 )
        
    def inorder_traversal(self, node):
        if node is None:
            return []
        return (
            self.inorder_traversal(node.left) + [node.key] + self.inorder_traversal(node.right)
            )
        
    def preorder_traversal(self, node):
        if node is None:
            return []
        return (
            [node.key] + self.preorder_traversal(node.left) + self.preorder_traversal(node.right)
        )
        
    def postorder_traversal(self, node):
        if node is None:
            return []
        return (
            self.postorder_traversal(node.left) + self.postorder_traversal(node.right) + [node.key]
        )
        
    def tree_size(self, node):
        if node is None:
            return 0
        return 1 + self.tree_size(node.left) + self.tree_size(node.right)

    @staticmethod
    def parse_tuple(self, data): # does what the commented code just did
        if isinstance(data, tuple) and len(data) == 3:
            node = TreeNode(data[1])
            node.left = self.parse_tuple(data[0])
            node.right = self.parse_tuple(data[2])
        elif data is None:
            node = None
        else:
            node = TreeNode(data)
        return node
        


tree_tuple = ((1,3,None), 2, ((None, 3, 4), 5, (6, 7, 8)))
tree = TreeNode.parse_tuple(tree_tuple)
# display_keys(node = tree)
tree2 = TreeNode.parse_tuple(((None, 1,None),2,3))
# display_keys(node = tree2)
print(TreeNode.inorder_traversal(tree2))
print("*"*50)
print(TreeNode.tree_size(tree2))
print(TreeNode.tree_size(tree))
